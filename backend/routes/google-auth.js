const express = require('express');
const router = express.Router();
const { setupAuth, createBucket, getPayload } = require('../util/google');
const HttpStatus = require('http-status-codes');
const users = require('../util/users');

/**
 * @swagger
 * path:
 *  /google-auth/:
 *    get:
 *      summary: Check session validity.
 *      description: >
 *        Verify user's id token with Google.
 *        If it's (still) good, respond with decoded token payload.
 *      security:
 *        - bearerAuth: []
 *      responses:
 *        '200':
 *          description: >
 *            Session ok.
 *            For schema, see: https://developers.google.com/identity/sign-in/web/backend-auth#verify-the-integrity-of-the-id-token
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                example: {
                    "iss": "https://accounts.google.com",
                    "sub": "110169484474386276334",
                    "azp": "1008719970978-hb24n2dstb40o45d4feuo2ukqmcc6381.apps.googleusercontent.com",
                    "aud": "1008719970978-hb24n2dstb40o45d4feuo2ukqmcc6381.apps.googleusercontent.com",
                    "iat": "1433978353",
                    "exp": "1433981953",
                    "email": "testuser@gmail.com",
                    "email_verified": "true",
                    "name" : "Test User",
                    "picture": "https://lh4.googleusercontent.com/-kYgzyAWpZzJ/ABCDEFGHI/AAAJKLMNOP/tIXL9Ir44LE/s99-c/photo.jpg",
                    "given_name": "Test",
                    "family_name": "User",
                    "locale": "en"
                    }
 *        '401':
 *          description: Missing, expired, or invalid id_token
 *          content:
 *            application/json:
 *              schema:
 *                name: error message
 *                type: string
 *
 */
router.get('/', async function (req, res) {
  const oAuth2Client = setupAuth();
  try {
    const { payload } = await oAuth2Client.verifyIdToken({
      idToken: req.headers.authorization.substr(7),
      audience: process.env.CLIENT_ID
    });
    res.status(HttpStatus.OK).json(payload);
  } catch (e) {
    res.status(HttpStatus.UNAUTHORIZED).json(e.message);
  }
});

/**
 * @swagger
 * path:
 *  /google-auth/:
 *    post:
 *      summary: Exchanges an authCode for auth tokens and sends them back to client.
 *      description: >
 *        User submits authCode generated by the login button.
 *        Server gets auth tokens (id_token, refresh_token etc.) and saves/updates refresh token tied to each email.
 *        Server also opens google bucket object, by using refresh token
 *      parameters:
 *        - name: authCode
 *          in: req.body.authCode
 *          type: string
 *      responses:
 *        '200':
 *          description: Session ok.
 *          content:
 *            application/json:
 *              schema:
 *                type: object
 *                properties:
 *                  idtoken:
 *                    type: string
 *                    description: idToken offered by google OAuth2
 *                    example: IDTOKENXYZ
 *        '400':
 *          description: bad request, missing autCode
 *          content:
 *            application/json:
 *              schema:
 *                type: string
 *                example: "Cannot read property 'code' of undefined"
 *        '401':
 *          description: >
 *            Many possible errors, the most frequent one is a
 *            missing, expired, or invalid id_token OR refresh_token. One way to repair this is to go to
 *            https://myaccount.google.com/permissions?pli=1 and remove app from permission list, forcing repermission of app
 *          content:
 *            application/json:
 *              schema:
 *                type: string
 *                example: 'Error: no refresh_token'
 *        '503':
 *          description: Database unavailable, check its connection
 *          content:
 *            application/json:
 *              schema:
 *                type: string
 *                example: 'Error: Database unavailable'
 *
 *
 */
router.post('/', async (req, res) => {
  const oAuth2Client = setupAuth();
  try {
    // Get tokens from Google
    const { tokens } = await oAuth2Client.getToken(req.body.authCode);
    const payload = await getPayload(
      oAuth2Client,
      tokens.id_token,
      process.env.CLIENT_ID
    );
    // Save user to db
    const saveUserResponse = await users.saveUser(payload.email);
    // If this is a first login, there will be a refresh_token. Save it to db.
    // If not, need to get existing refresh_token from db
    let refreshToken = tokens.refresh_token;
    let updateTokenResponse = {};
    if (refreshToken) {
      updateTokenResponse = await users.updateRefreshToken(payload.email, refreshToken);
    } else {
      const { token } = await users.getToken(payload.email);
      refreshToken = token;
    }
    // Inform the user of possible database error
    if (saveUserResponse.status === HttpStatus.SERVICE_UNAVAILABLE
        || updateTokenResponse.status === HttpStatus.SERVICE_UNAVAILABLE) {
      res.status(HttpStatus.SERVICE_UNAVAILABLE).json('Error: Database unavailable');
      return;
    }
    // If refresh_token still does not exist, the user needs to re-consent
    if (!refreshToken) {
      res.status(HttpStatus.UNAUTHORIZED).json('Error: no refresh_token');
      return;
    }
    // Ensure there is a bucket
    oAuth2Client.setCredentials({
      refresh_token: refreshToken
    });
    await createBucket(process.env.PROJECT_ID, oAuth2Client);
    // Give tokens to frontend
    res.status(HttpStatus.OK).json({ id_token: tokens.id_token });
  } catch (e) {
    console.log(e);
    if (e.message === "Cannot read property 'code' of undefined") {
      // In case frontend didn't send a code
      res.status(HttpStatus.BAD_REQUEST).end();
    } else {
      // Forward other errors as 401
      res.status(HttpStatus.UNAUTHORIZED).json(e.message);
    }
  }
});

module.exports = router;
